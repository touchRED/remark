let grid = [];
let gridSize = 15;
let islands = [];
let agents = [];
let gates = [];

let futura;
let sourceRegular;
let sourceLight;
let sourceExtraLight;

let gui;
let ctrl;

let creatingIsland = false;
let creatingGate = false;

let logging = true;
let displayLogger = true;
let logger;

function Controls(){
  this.addLanguage = function(){
    let v = prompt("Start the language of the island with a vocabulary word");
    let newWord = new Word(v, floor(random(100000)));
    let i = new Island(islands.length, color(random(360), 100, 90), newWord);
    islands.push(i);
    let f = gui.addFolder("Language " + i.id);
    f.add(i, 'nextWord').listen();
    f.add(i, 'addWord');
    f.add(i, 'populate');
    f.open();
    creatingIsland = true;
  }
  this.addGate = function(){
    let g = new Gate();
    gates.push(g);
    creatingGate = true;
  }
}

function Gate(){
  this.points = [];
}

function GridItem(x_, y_, type_, gx_, gy_){
  //item's location on the canvas
  this.x = x_;
  this.y = y_;
  //item's location in grid array
  this.gridX = gx_;
  this.gridY = gy_;
  this.type = type_;
  this.currentAgent = false;
  this.gateTo;
}

function preload(){
  futura = loadFont('/styles/Futura.ttf');
  sourceRegular = loadFont('/styles/SourceSansPro-Regular.ttf');
  sourceLight = loadFont('/styles/SourceSansPro-Light.ttf');
  sourceExtraLight = loadFont('/styles/SourceSansPro-ExtraLight.ttf');
}

function setup(){
  createCanvas(15 * floor(window.innerWidth / 15), 15 * floor(window.innerHeight/15));
  colorMode(HSL);
  noStroke();

  logger = createDiv("");
  logger.id("logger");

  //initialize gui
  ctrl = new Controls();
  gui = new dat.GUI();
  gui.add(ctrl, 'addLanguage');
  gui.add(ctrl, 'addGate');

  //create grid
  for(let i = 0; i < width; i+=15){
    let col = [];
    for(let j = 0; j < height; j+=15){
      col.push(new GridItem(i, j, 'ocean', grid.length, col.length));
    }
    grid.push(col);
  }
}

function draw(){
  background(255);

  //draw islands
  for(let i of islands){
    for(let p of i.points){
      fill(i.color);
      rect(p.x, p.y, 15, 15);
    }
  }

  //draw cursor
  fill(90);
  rect(15 * floor(mouseX/15), 15 * floor(mouseY/15), 15, 15);

  //create new islands if in proper mode
  if(mouseIsPressed){
    if(creatingIsland && grid[floor(mouseX/15)] && grid[floor(mouseX/15)][floor(mouseY/15)]){
      //if we haven't added this point to the new island, add it
      if(!islands[islands.length - 1].points.includes(grid[floor(mouseX/15)][floor(mouseY/15)])){
        islands[islands.length - 1].points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);
        //also change the type of the grid tile to the island's id
        grid[floor(mouseX/15)][floor(mouseY/15)].type = islands.length - 1;
      }
    }
  }

  for(let g of gates){
    stroke(80);
    if(g.points.length == 2){
      line(g.points[0].x + 7.5, g.points[0].y + 7.5, g.points[1].x + 7.5, g.points[1].y + 7.5);
    }
    noStroke();
    for(let p of g.points){
      fill(95);
      rect(p.x, p.y, 15, 15);
    }
  }

  //draw agents
  for(let agent of agents){
    agent.draw();
  }

  if(logging){
    fill(0);
    textStyle(NORMAL);
    textSize(48);
    textFont(futura);
    text("Remark.", 10, 45);
    textSize(18);
    fill(40);
    text("A Language Evolution Simulator", 225, 44);
    for(let i = 0; i < islands.length; i++){
      fill(islands[i].color);
      textSize(28);
      rect(14, 67 + (i * 70), 20, 53);
      fill(40);
      textStyle(NORMAL);
      textFont(sourceExtraLight);
      text("Language " + i, 39, 90 + (i * 70));
      textSize(18);
      textStyle(ITALIC);
      let vocabString = "";
      for(let j = 0; j < islands[i].vocabulary.length; j++){
        if(j > 0){
          vocabString += ", ";
        }
        vocabString += islands[i].vocabulary[j].content;
      }
      textFont(sourceLight);
      text(vocabString, 39, 115 + (i * 70));
    }
  }
}

function mousePressed(){
  if(creatingGate){
    let currentGate = gates[gates.length - 1];
    switch(currentGate.points.length){
      case 0:
        currentGate.points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);
        grid[floor(mouseX/15)][floor(mouseY/15)].type = 'gate';
        break;
      case 1:
        currentGate.points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);
        grid[floor(mouseX/15)][floor(mouseY/15)].type = 'gate';

        let aX = currentGate.points[0].gridX;
        let aY = currentGate.points[0].gridY;
        let bX = currentGate.points[1].gridX;
        let bY = currentGate.points[1].gridY;

        grid[aX][aY].gateTo = grid[bX][bY];
        grid[bX][bY].gateTo = grid[aX][aY];

        creatingGate = false;
        break;
    }
  }
}

function mouseReleased(){
  if(creatingIsland){
    console.log(islands[islands.length-1]);
    //populate island with agents
    // islands[islands.length - 1].populate(floor(random(islands[islands.length-1].points.length / 4)) + 1);
    creatingIsland = false;
  }
}

function keyPressed(){
  switch(keyCode){
    case 76:
      if(logging){
        logging = false;
        // logger.hide();
      }else{
        logging = true;
        // logger.show();
      }
      break;
    case 73:
      if(displayLogger){
        displayLogger = false;
        logger.hide();
      }else{
        displayLogger = true;
        logger.show();
      }
      break;
    default:
      console.log(keyCode);
      break;
  }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBncmlkID0gW107XG5sZXQgZ3JpZFNpemUgPSAxNTtcbmxldCBpc2xhbmRzID0gW107XG5sZXQgYWdlbnRzID0gW107XG5sZXQgZ2F0ZXMgPSBbXTtcblxubGV0IGZ1dHVyYTtcbmxldCBzb3VyY2VSZWd1bGFyO1xubGV0IHNvdXJjZUxpZ2h0O1xubGV0IHNvdXJjZUV4dHJhTGlnaHQ7XG5cbmxldCBndWk7XG5sZXQgY3RybDtcblxubGV0IGNyZWF0aW5nSXNsYW5kID0gZmFsc2U7XG5sZXQgY3JlYXRpbmdHYXRlID0gZmFsc2U7XG5cbmxldCBsb2dnaW5nID0gdHJ1ZTtcbmxldCBkaXNwbGF5TG9nZ2VyID0gdHJ1ZTtcbmxldCBsb2dnZXI7XG5cbmZ1bmN0aW9uIENvbnRyb2xzKCl7XG4gIHRoaXMuYWRkTGFuZ3VhZ2UgPSBmdW5jdGlvbigpe1xuICAgIGxldCB2ID0gcHJvbXB0KFwiU3RhcnQgdGhlIGxhbmd1YWdlIG9mIHRoZSBpc2xhbmQgd2l0aCBhIHZvY2FidWxhcnkgd29yZFwiKTtcbiAgICBsZXQgbmV3V29yZCA9IG5ldyBXb3JkKHYsIGZsb29yKHJhbmRvbSgxMDAwMDApKSk7XG4gICAgbGV0IGkgPSBuZXcgSXNsYW5kKGlzbGFuZHMubGVuZ3RoLCBjb2xvcihyYW5kb20oMzYwKSwgMTAwLCA5MCksIG5ld1dvcmQpO1xuICAgIGlzbGFuZHMucHVzaChpKTtcbiAgICBsZXQgZiA9IGd1aS5hZGRGb2xkZXIoXCJMYW5ndWFnZSBcIiArIGkuaWQpO1xuICAgIGYuYWRkKGksICduZXh0V29yZCcpLmxpc3RlbigpO1xuICAgIGYuYWRkKGksICdhZGRXb3JkJyk7XG4gICAgZi5hZGQoaSwgJ3BvcHVsYXRlJyk7XG4gICAgZi5vcGVuKCk7XG4gICAgY3JlYXRpbmdJc2xhbmQgPSB0cnVlO1xuICB9XG4gIHRoaXMuYWRkR2F0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgbGV0IGcgPSBuZXcgR2F0ZSgpO1xuICAgIGdhdGVzLnB1c2goZyk7XG4gICAgY3JlYXRpbmdHYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBHYXRlKCl7XG4gIHRoaXMucG9pbnRzID0gW107XG59XG5cbmZ1bmN0aW9uIEdyaWRJdGVtKHhfLCB5XywgdHlwZV8sIGd4XywgZ3lfKXtcbiAgLy9pdGVtJ3MgbG9jYXRpb24gb24gdGhlIGNhbnZhc1xuICB0aGlzLnggPSB4XztcbiAgdGhpcy55ID0geV87XG4gIC8vaXRlbSdzIGxvY2F0aW9uIGluIGdyaWQgYXJyYXlcbiAgdGhpcy5ncmlkWCA9IGd4XztcbiAgdGhpcy5ncmlkWSA9IGd5XztcbiAgdGhpcy50eXBlID0gdHlwZV87XG4gIHRoaXMuY3VycmVudEFnZW50ID0gZmFsc2U7XG4gIHRoaXMuZ2F0ZVRvO1xufVxuXG5mdW5jdGlvbiBwcmVsb2FkKCl7XG4gIGZ1dHVyYSA9IGxvYWRGb250KCcvc3R5bGVzL0Z1dHVyYS50dGYnKTtcbiAgc291cmNlUmVndWxhciA9IGxvYWRGb250KCcvc3R5bGVzL1NvdXJjZVNhbnNQcm8tUmVndWxhci50dGYnKTtcbiAgc291cmNlTGlnaHQgPSBsb2FkRm9udCgnL3N0eWxlcy9Tb3VyY2VTYW5zUHJvLUxpZ2h0LnR0ZicpO1xuICBzb3VyY2VFeHRyYUxpZ2h0ID0gbG9hZEZvbnQoJy9zdHlsZXMvU291cmNlU2Fuc1Byby1FeHRyYUxpZ2h0LnR0ZicpO1xufVxuXG5mdW5jdGlvbiBzZXR1cCgpe1xuICBjcmVhdGVDYW52YXMoMTUgKiBmbG9vcih3aW5kb3cuaW5uZXJXaWR0aCAvIDE1KSwgMTUgKiBmbG9vcih3aW5kb3cuaW5uZXJIZWlnaHQvMTUpKTtcbiAgY29sb3JNb2RlKEhTTCk7XG4gIG5vU3Ryb2tlKCk7XG5cbiAgbG9nZ2VyID0gY3JlYXRlRGl2KFwiXCIpO1xuICBsb2dnZXIuaWQoXCJsb2dnZXJcIik7XG5cbiAgLy9pbml0aWFsaXplIGd1aVxuICBjdHJsID0gbmV3IENvbnRyb2xzKCk7XG4gIGd1aSA9IG5ldyBkYXQuR1VJKCk7XG4gIGd1aS5hZGQoY3RybCwgJ2FkZExhbmd1YWdlJyk7XG4gIGd1aS5hZGQoY3RybCwgJ2FkZEdhdGUnKTtcblxuICAvL2NyZWF0ZSBncmlkXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB3aWR0aDsgaSs9MTUpe1xuICAgIGxldCBjb2wgPSBbXTtcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgaGVpZ2h0OyBqKz0xNSl7XG4gICAgICBjb2wucHVzaChuZXcgR3JpZEl0ZW0oaSwgaiwgJ29jZWFuJywgZ3JpZC5sZW5ndGgsIGNvbC5sZW5ndGgpKTtcbiAgICB9XG4gICAgZ3JpZC5wdXNoKGNvbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhdygpe1xuICBiYWNrZ3JvdW5kKDI1NSk7XG5cbiAgLy9kcmF3IGlzbGFuZHNcbiAgZm9yKGxldCBpIG9mIGlzbGFuZHMpe1xuICAgIGZvcihsZXQgcCBvZiBpLnBvaW50cyl7XG4gICAgICBmaWxsKGkuY29sb3IpO1xuICAgICAgcmVjdChwLngsIHAueSwgMTUsIDE1KTtcbiAgICB9XG4gIH1cblxuICAvL2RyYXcgY3Vyc29yXG4gIGZpbGwoOTApO1xuICByZWN0KDE1ICogZmxvb3IobW91c2VYLzE1KSwgMTUgKiBmbG9vcihtb3VzZVkvMTUpLCAxNSwgMTUpO1xuXG4gIC8vY3JlYXRlIG5ldyBpc2xhbmRzIGlmIGluIHByb3BlciBtb2RlXG4gIGlmKG1vdXNlSXNQcmVzc2VkKXtcbiAgICBpZihjcmVhdGluZ0lzbGFuZCAmJiBncmlkW2Zsb29yKG1vdXNlWC8xNSldICYmIGdyaWRbZmxvb3IobW91c2VYLzE1KV1bZmxvb3IobW91c2VZLzE1KV0pe1xuICAgICAgLy9pZiB3ZSBoYXZlbid0IGFkZGVkIHRoaXMgcG9pbnQgdG8gdGhlIG5ldyBpc2xhbmQsIGFkZCBpdFxuICAgICAgaWYoIWlzbGFuZHNbaXNsYW5kcy5sZW5ndGggLSAxXS5wb2ludHMuaW5jbHVkZXMoZ3JpZFtmbG9vcihtb3VzZVgvMTUpXVtmbG9vcihtb3VzZVkvMTUpXSkpe1xuICAgICAgICBpc2xhbmRzW2lzbGFuZHMubGVuZ3RoIC0gMV0ucG9pbnRzLnB1c2goZ3JpZFtmbG9vcihtb3VzZVgvMTUpXVtmbG9vcihtb3VzZVkvMTUpXSk7XG4gICAgICAgIC8vYWxzbyBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIGdyaWQgdGlsZSB0byB0aGUgaXNsYW5kJ3MgaWRcbiAgICAgICAgZ3JpZFtmbG9vcihtb3VzZVgvMTUpXVtmbG9vcihtb3VzZVkvMTUpXS50eXBlID0gaXNsYW5kcy5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvcihsZXQgZyBvZiBnYXRlcyl7XG4gICAgc3Ryb2tlKDgwKTtcbiAgICBpZihnLnBvaW50cy5sZW5ndGggPT0gMil7XG4gICAgICBsaW5lKGcucG9pbnRzWzBdLnggKyA3LjUsIGcucG9pbnRzWzBdLnkgKyA3LjUsIGcucG9pbnRzWzFdLnggKyA3LjUsIGcucG9pbnRzWzFdLnkgKyA3LjUpO1xuICAgIH1cbiAgICBub1N0cm9rZSgpO1xuICAgIGZvcihsZXQgcCBvZiBnLnBvaW50cyl7XG4gICAgICBmaWxsKDk1KTtcbiAgICAgIHJlY3QocC54LCBwLnksIDE1LCAxNSk7XG4gICAgfVxuICB9XG5cbiAgLy9kcmF3IGFnZW50c1xuICBmb3IobGV0IGFnZW50IG9mIGFnZW50cyl7XG4gICAgYWdlbnQuZHJhdygpO1xuICB9XG5cbiAgaWYobG9nZ2luZyl7XG4gICAgZmlsbCgwKTtcbiAgICB0ZXh0U3R5bGUoTk9STUFMKTtcbiAgICB0ZXh0U2l6ZSg0OCk7XG4gICAgdGV4dEZvbnQoZnV0dXJhKTtcbiAgICB0ZXh0KFwiUmVtYXJrLlwiLCAxMCwgNDUpO1xuICAgIHRleHRTaXplKDE4KTtcbiAgICBmaWxsKDQwKTtcbiAgICB0ZXh0KFwiQSBMYW5ndWFnZSBFdm9sdXRpb24gU2ltdWxhdG9yXCIsIDIyNSwgNDQpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpc2xhbmRzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGZpbGwoaXNsYW5kc1tpXS5jb2xvcik7XG4gICAgICB0ZXh0U2l6ZSgyOCk7XG4gICAgICByZWN0KDE0LCA2NyArIChpICogNzApLCAyMCwgNTMpO1xuICAgICAgZmlsbCg0MCk7XG4gICAgICB0ZXh0U3R5bGUoTk9STUFMKTtcbiAgICAgIHRleHRGb250KHNvdXJjZUV4dHJhTGlnaHQpO1xuICAgICAgdGV4dChcIkxhbmd1YWdlIFwiICsgaSwgMzksIDkwICsgKGkgKiA3MCkpO1xuICAgICAgdGV4dFNpemUoMTgpO1xuICAgICAgdGV4dFN0eWxlKElUQUxJQyk7XG4gICAgICBsZXQgdm9jYWJTdHJpbmcgPSBcIlwiO1xuICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGlzbGFuZHNbaV0udm9jYWJ1bGFyeS5sZW5ndGg7IGorKyl7XG4gICAgICAgIGlmKGogPiAwKXtcbiAgICAgICAgICB2b2NhYlN0cmluZyArPSBcIiwgXCI7XG4gICAgICAgIH1cbiAgICAgICAgdm9jYWJTdHJpbmcgKz0gaXNsYW5kc1tpXS52b2NhYnVsYXJ5W2pdLmNvbnRlbnQ7XG4gICAgICB9XG4gICAgICB0ZXh0Rm9udChzb3VyY2VMaWdodCk7XG4gICAgICB0ZXh0KHZvY2FiU3RyaW5nLCAzOSwgMTE1ICsgKGkgKiA3MCkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VzZVByZXNzZWQoKXtcbiAgaWYoY3JlYXRpbmdHYXRlKXtcbiAgICBsZXQgY3VycmVudEdhdGUgPSBnYXRlc1tnYXRlcy5sZW5ndGggLSAxXTtcbiAgICBzd2l0Y2goY3VycmVudEdhdGUucG9pbnRzLmxlbmd0aCl7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGN1cnJlbnRHYXRlLnBvaW50cy5wdXNoKGdyaWRbZmxvb3IobW91c2VYLzE1KV1bZmxvb3IobW91c2VZLzE1KV0pO1xuICAgICAgICBncmlkW2Zsb29yKG1vdXNlWC8xNSldW2Zsb29yKG1vdXNlWS8xNSldLnR5cGUgPSAnZ2F0ZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBjdXJyZW50R2F0ZS5wb2ludHMucHVzaChncmlkW2Zsb29yKG1vdXNlWC8xNSldW2Zsb29yKG1vdXNlWS8xNSldKTtcbiAgICAgICAgZ3JpZFtmbG9vcihtb3VzZVgvMTUpXVtmbG9vcihtb3VzZVkvMTUpXS50eXBlID0gJ2dhdGUnO1xuXG4gICAgICAgIGxldCBhWCA9IGN1cnJlbnRHYXRlLnBvaW50c1swXS5ncmlkWDtcbiAgICAgICAgbGV0IGFZID0gY3VycmVudEdhdGUucG9pbnRzWzBdLmdyaWRZO1xuICAgICAgICBsZXQgYlggPSBjdXJyZW50R2F0ZS5wb2ludHNbMV0uZ3JpZFg7XG4gICAgICAgIGxldCBiWSA9IGN1cnJlbnRHYXRlLnBvaW50c1sxXS5ncmlkWTtcblxuICAgICAgICBncmlkW2FYXVthWV0uZ2F0ZVRvID0gZ3JpZFtiWF1bYlldO1xuICAgICAgICBncmlkW2JYXVtiWV0uZ2F0ZVRvID0gZ3JpZFthWF1bYVldO1xuXG4gICAgICAgIGNyZWF0aW5nR2F0ZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbW91c2VSZWxlYXNlZCgpe1xuICBpZihjcmVhdGluZ0lzbGFuZCl7XG4gICAgY29uc29sZS5sb2coaXNsYW5kc1tpc2xhbmRzLmxlbmd0aC0xXSk7XG4gICAgLy9wb3B1bGF0ZSBpc2xhbmQgd2l0aCBhZ2VudHNcbiAgICAvLyBpc2xhbmRzW2lzbGFuZHMubGVuZ3RoIC0gMV0ucG9wdWxhdGUoZmxvb3IocmFuZG9tKGlzbGFuZHNbaXNsYW5kcy5sZW5ndGgtMV0ucG9pbnRzLmxlbmd0aCAvIDQpKSArIDEpO1xuICAgIGNyZWF0aW5nSXNsYW5kID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5UHJlc3NlZCgpe1xuICBzd2l0Y2goa2V5Q29kZSl7XG4gICAgY2FzZSA3NjpcbiAgICAgIGlmKGxvZ2dpbmcpe1xuICAgICAgICBsb2dnaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIGxvZ2dlci5oaWRlKCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgbG9nZ2luZyA9IHRydWU7XG4gICAgICAgIC8vIGxvZ2dlci5zaG93KCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDczOlxuICAgICAgaWYoZGlzcGxheUxvZ2dlcil7XG4gICAgICAgIGRpc3BsYXlMb2dnZXIgPSBmYWxzZTtcbiAgICAgICAgbG9nZ2VyLmhpZGUoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBkaXNwbGF5TG9nZ2VyID0gdHJ1ZTtcbiAgICAgICAgbG9nZ2VyLnNob3coKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZyhrZXlDb2RlKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG4iXSwiZmlsZSI6Im1haW4uanMifQ==

//# sourceMappingURL=main.min.js.map
