{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.min.js","sourcesContent":["let grid = [];\nlet gridSize = 15;\nlet islands = [];\nlet agents = [];\nlet gates = [];\n\nlet futura;\nlet sourceRegular;\nlet sourceLight;\nlet sourceExtraLight;\n\nlet gui;\nlet ctrl;\n\nlet creatingIsland = false;\nlet creatingGate = false;\n\nlet logging = true;\nlet displayLogger = true;\nlet logger;\n\nfunction Controls(){\n  this.addLanguage = function(){\n    let v = prompt(\"Start the language of the island with a vocabulary word\");\n    let newWord = new Word(v, floor(random(100000)));\n    let i = new Island(islands.length, color(random(360), 100, 90), newWord);\n    islands.push(i);\n    let f = gui.addFolder(\"Language \" + i.id);\n    f.add(i, 'nextWord').listen();\n    f.add(i, 'addWord');\n    f.add(i, 'populate');\n    f.open();\n    creatingIsland = true;\n  }\n  this.addGate = function(){\n    let g = new Gate();\n    gates.push(g);\n    creatingGate = true;\n  }\n}\n\nfunction Gate(){\n  this.points = [];\n}\n\nfunction GridItem(x_, y_, type_, gx_, gy_){\n  //item's location on the canvas\n  this.x = x_;\n  this.y = y_;\n  //item's location in grid array\n  this.gridX = gx_;\n  this.gridY = gy_;\n  this.type = type_;\n  this.currentAgent = false;\n  this.gateTo;\n}\n\nfunction preload(){\n  futura = loadFont('/styles/Futura.ttf');\n  sourceRegular = loadFont('/styles/SourceSansPro-Regular.ttf');\n  sourceLight = loadFont('/styles/SourceSansPro-Light.ttf');\n  sourceExtraLight = loadFont('/styles/SourceSansPro-ExtraLight.ttf');\n}\n\nfunction setup(){\n  createCanvas(15 * floor(window.innerWidth / 15), 15 * floor(window.innerHeight/15));\n  colorMode(HSL);\n  noStroke();\n\n  logger = createDiv(\"\");\n  logger.id(\"logger\");\n\n  //initialize gui\n  ctrl = new Controls();\n  gui = new dat.GUI();\n  gui.add(ctrl, 'addLanguage');\n  gui.add(ctrl, 'addGate');\n\n  //create grid\n  for(let i = 0; i < width; i+=15){\n    let col = [];\n    for(let j = 0; j < height; j+=15){\n      col.push(new GridItem(i, j, 'ocean', grid.length, col.length));\n    }\n    grid.push(col);\n  }\n}\n\nfunction draw(){\n  background(255);\n\n  //draw islands\n  for(let i of islands){\n    for(let p of i.points){\n      fill(i.color);\n      rect(p.x, p.y, 15, 15);\n    }\n  }\n\n  //draw cursor\n  fill(90);\n  rect(15 * floor(mouseX/15), 15 * floor(mouseY/15), 15, 15);\n\n  //create new islands if in proper mode\n  if(mouseIsPressed){\n    if(creatingIsland && grid[floor(mouseX/15)] && grid[floor(mouseX/15)][floor(mouseY/15)]){\n      //if we haven't added this point to the new island, add it\n      if(!islands[islands.length - 1].points.includes(grid[floor(mouseX/15)][floor(mouseY/15)])){\n        islands[islands.length - 1].points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);\n        //also change the type of the grid tile to the island's id\n        grid[floor(mouseX/15)][floor(mouseY/15)].type = islands.length - 1;\n      }\n    }\n  }\n\n  for(let g of gates){\n    stroke(80);\n    if(g.points.length == 2){\n      line(g.points[0].x + 7.5, g.points[0].y + 7.5, g.points[1].x + 7.5, g.points[1].y + 7.5);\n    }\n    noStroke();\n    for(let p of g.points){\n      fill(95);\n      rect(p.x, p.y, 15, 15);\n    }\n  }\n\n  //draw agents\n  for(let agent of agents){\n    agent.draw();\n  }\n\n  if(logging){\n    fill(0);\n    textStyle(NORMAL);\n    textSize(48);\n    textFont(futura);\n    text(\"Remark.\", 10, 45);\n    textSize(18);\n    fill(40);\n    text(\"A Language Evolution Simulator\", 225, 44);\n    for(let i = 0; i < islands.length; i++){\n      fill(islands[i].color);\n      textSize(28);\n      rect(14, 67 + (i * 70), 20, 53);\n      fill(40);\n      textStyle(NORMAL);\n      textFont(sourceExtraLight);\n      text(\"Language \" + i, 39, 90 + (i * 70));\n      textSize(18);\n      textStyle(ITALIC);\n      let vocabString = \"\";\n      for(let j = 0; j < islands[i].vocabulary.length; j++){\n        if(j > 0){\n          vocabString += \", \";\n        }\n        vocabString += islands[i].vocabulary[j].content;\n      }\n      textFont(sourceLight);\n      text(vocabString, 39, 115 + (i * 70));\n    }\n  }\n}\n\nfunction mousePressed(){\n  if(creatingGate){\n    let currentGate = gates[gates.length - 1];\n    switch(currentGate.points.length){\n      case 0:\n        currentGate.points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);\n        grid[floor(mouseX/15)][floor(mouseY/15)].type = 'gate';\n        break;\n      case 1:\n        currentGate.points.push(grid[floor(mouseX/15)][floor(mouseY/15)]);\n        grid[floor(mouseX/15)][floor(mouseY/15)].type = 'gate';\n\n        let aX = currentGate.points[0].gridX;\n        let aY = currentGate.points[0].gridY;\n        let bX = currentGate.points[1].gridX;\n        let bY = currentGate.points[1].gridY;\n\n        grid[aX][aY].gateTo = grid[bX][bY];\n        grid[bX][bY].gateTo = grid[aX][aY];\n\n        creatingGate = false;\n        break;\n    }\n  }\n}\n\nfunction mouseReleased(){\n  if(creatingIsland){\n    console.log(islands[islands.length-1]);\n    //populate island with agents\n    // islands[islands.length - 1].populate(floor(random(islands[islands.length-1].points.length / 4)) + 1);\n    creatingIsland = false;\n  }\n}\n\nfunction keyPressed(){\n  switch(keyCode){\n    case 76:\n      if(logging){\n        logging = false;\n        // logger.hide();\n      }else{\n        logging = true;\n        // logger.show();\n      }\n      break;\n    case 73:\n      if(displayLogger){\n        displayLogger = false;\n        logger.hide();\n      }else{\n        displayLogger = true;\n        logger.show();\n      }\n      break;\n    default:\n      console.log(keyCode);\n      break;\n  }\n}\n"]}